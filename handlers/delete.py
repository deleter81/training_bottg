from aiogram import types, Router, F
from aiogram.filters import Command
from database.db import delete_progress, get_progress

router = Router()


# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message):
    user_id = message.from_user.id
    workouts = get_progress(user_id)
    if not workouts:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    response = "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º:*\n\n"
    buttons = []

    for workout in workouts:
        workout_id, cat, exercise, reps, weight, date = workout
        response += f"ID: `{workout_id}`, –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}, –í–µ—Å: {weight} –∫–≥, –î–∞—Ç–∞: {date}\n"
        # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å callback_data
        buttons.append([
            types.InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å ID {workout_id}",
                callback_data=f"delete_{workout_id}"
            )
        ])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer(response, parse_mode="Markdown", reply_markup=keyboard)


# –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback-–∫–Ω–æ–ø–∫—É
@router.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_record_callback(callback_query: types.CallbackQuery):
    try:
        record_id = int(callback_query.data.split('_')[1])
        delete_progress(record_id)
        await callback_query.message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {record_id} —É–¥–∞–ª–µ–Ω–∞.")
        await callback_query.answer("–£–¥–∞–ª–µ–Ω–æ ‚úÖ")
    except Exception as e:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")


# –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
@router.message(Command("delete"))
async def delete_record(message: types.Message):
    try:
        args = message.text.split()
        if len(args) != 2:
            await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: `/delete 1`")
            return

        record_id = int(args[1])
        delete_progress(record_id)
        await message.answer(f"‚úÖ –ó–∞–ø–∏—Å—å —Å ID {record_id} —É–¥–∞–ª–µ–Ω–∞.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
