import re
from datetime import datetime
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database.db import add_progress

router = Router()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
CATEGORIES = ["–ì—Ä—É–¥—å", "–°–ø–∏–Ω–∞", "–ù–æ–≥–∏", "–†—É–∫–∏", "–ü–ª–µ—á–∏", "–ö–∞—Ä–¥–∏–æ", "–û–±—â–µ–µ"]
EXERCISES = {
    "–ì—Ä—É–¥—å": ["–ñ–∏–º –ª—ë–∂–∞", "–û—Ç–∂–∏–º–∞–Ω–∏—è", "–†–∞–∑–≤–æ–¥–∫–∞"],
    "–°–ø–∏–Ω–∞": ["–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏", "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è", "–¢—è–≥–∞ –±–ª–æ–∫–∞"],
    "–ù–æ–≥–∏": ["–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è", "–í—ã–ø–∞–¥—ã", "–ñ–∏–º –Ω–æ–≥–∞–º–∏"],
    "–†—É–∫–∏": ["–°–≥–∏–±–∞–Ω–∏—è –Ω–∞ –±–∏—Ü–µ–ø—Å", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º", "–ú–æ–ª–æ—Ç–∫–∏"],
    "–ü–ª–µ—á–∏": ["–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π", "–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã", "–ü–æ–¥—ä—ë–º –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π"],
    "–ö–∞—Ä–¥–∏–æ": ["–ë–µ–≥", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–ü—Ä—ã–∂–∫–∏ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ"],
    "–û–±—â–µ–µ": ["–ü–ª–∞–Ω–∫–∞", "–ë–µ—Ä–ø–∏", "–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è"]
}

# FSM –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
class AddWorkout(StatesGroup):
    waiting_for_category = State()
    waiting_for_exercise = State()
    waiting_for_weight = State()
    waiting_for_reps = State()
    waiting_for_date = State()

# –°—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
@router.message(Command("add"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def start_add(message: types.Message, state: FSMContext):
    await state.clear()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [
        types.InlineKeyboardButton(text=category, callback_data=f"category_{category}")
        for category in CATEGORIES
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", reply_markup=keyboard)
    await state.set_state(AddWorkout.waiting_for_category)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Üí –ü–æ–∫–∞–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
@router.callback_query(lambda c: c.data.startswith('category_'))
async def process_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.split('_')[1]
    await state.update_data(category=category)

    exercises = EXERCISES.get(category, [])
    buttons = [
        types.InlineKeyboardButton(text=exercise, callback_data=f"exercise_{exercise}")
        for exercise in exercises
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])

    await callback_query.message.edit_text(
        f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤—ã–±—Ä–∞–Ω–∞: *{category}*\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    await state.set_state(AddWorkout.waiting_for_exercise)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è ‚Üí –í–≤–æ–¥ –≤–µ—Å–∞
@router.callback_query(lambda c: c.data.startswith('exercise_'))
async def process_exercise(callback_query: types.CallbackQuery, state: FSMContext):
    exercise = callback_query.data.split('_')[1]
    await state.update_data(exercise=exercise)

    await callback_query.message.edit_text(
        f"‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ: *{exercise}*\n–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–≤ –∫–≥):",
        parse_mode="Markdown"
    )
    await state.set_state(AddWorkout.waiting_for_weight)

# –í–≤–æ–¥ –≤–µ—Å–∞ ‚Üí –í–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
@router.message(AddWorkout.waiting_for_weight)
async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        await state.update_data(weight=weight)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:")
        await state.set_state(AddWorkout.waiting_for_reps)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 75.5).")

# –í–≤–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π ‚Üí –í–≤–æ–¥ –¥–∞—Ç—ã
@router.message(AddWorkout.waiting_for_reps)
async def process_reps(message: types.Message, state: FSMContext):
    try:
        reps = int(message.text)
        await state.update_data(reps=reps)

        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
        await state.set_state(AddWorkout.waiting_for_date)

    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10).")

# –í–≤–æ–¥ –¥–∞—Ç—ã ‚Üí –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
@router.message(AddWorkout.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        date_pattern = r"^\d{2}\.\d{2}\.\d{4}$"
        if not re.match(date_pattern, message.text):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥")

        date = datetime.strptime(message.text, "%d.%m.%Y").strftime("%Y-%m-%d")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ state
        data = await state.get_data()
        category = data["category"]
        exercise = data["exercise"]
        weight = data["weight"]
        reps = data["reps"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_progress(
            user_id=message.from_user.id,
            exercise=exercise,
            category=category,
            reps=reps,
            weight=weight,
            date=date
        )

        await message.answer(
            f"‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
            f"üèãÔ∏è‚Äç‚ôÇÔ∏è –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: *{exercise}*\n"
            f"üìÖ –î–∞—Ç–∞: *{date}*\n"
            f"‚öñÔ∏è –í–µ—Å: *{weight} –∫–≥*\n"
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: *{reps}*\n",
            parse_mode="Markdown"
        )
        await state.clear()

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
