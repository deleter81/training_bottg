from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database.db import get_progress, update_progress
from handlers.history import show_history
from handlers.stats import show_stats

router = Router()

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CATEGORIES = ["–ì—Ä—É–¥—å", "–°–ø–∏–Ω–∞", "–ù–æ–≥–∏", "–†—É–∫–∏", "–ü–ª–µ—á–∏", "–ö–∞—Ä–¥–∏–æ", "–û–±—â–µ–µ"]

class EditWorkout(StatesGroup):
    waiting_for_id = State()
    waiting_for_new_category = State()
    waiting_for_new_values = State()

# –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
@router.message(Command("edit"))
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def start_edit(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    workouts = get_progress(user_id)

    if not workouts:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å ID
    response = "üìã *–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:*\n\n"
    for workout in workouts:
        response += f"ID: `{workout[0]}` ‚Äî {workout[2]} ‚Äî {workout[3]} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, {workout[4]} –∫–≥, –¥–∞—Ç–∞: {workout[5]}\n"

    response += "\n–í–≤–µ–¥–∏—Ç–µ ID —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    await message.answer(response, parse_mode="Markdown")
    await state.set_state(EditWorkout.waiting_for_id)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ ID
@router.message(EditWorkout.waiting_for_id)
async def process_id(message: types.Message, state: FSMContext):
    try:
        workout_id = int(message.text)
        await state.update_data(workout_id=workout_id)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        buttons = [
            types.InlineKeyboardButton(text=category, callback_data=f"edit_category_{category}")
            for category in CATEGORIES
        ]
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[buttons[i:i + 2] for i in range(0, len(buttons), 2)])

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)
        await state.set_state(EditWorkout.waiting_for_new_category)

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@router.callback_query(lambda c: c.data.startswith("edit_category_"))
async def process_new_category(callback_query: types.CallbackQuery, state: FSMContext):
    category = callback_query.data.split('_')[2]
    await state.update_data(category=category)

    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<b>–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π, –≤–µ—Å, –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥)</b>\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è, 12, 60, 2025-03-22</code>",
        parse_mode="HTML"
    )

    await state.set_state(EditWorkout.waiting_for_new_values)

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
@router.message(EditWorkout.waiting_for_new_values)
async def process_new_values(message: types.Message, state: FSMContext):
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        data = message.text.split(', ')
        if len(data) != 4:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ, –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è, –≤–µ—Å, –¥–∞—Ç–∞ (–≥–≥–≥–≥-–º–º-–¥–¥)")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        exercise, reps, weight, date = data[0], int(data[1]), float(data[2]), data[3]
        workout_data = await state.get_data()
        workout_id = workout_data["workout_id"]
        category = workout_data["category"]

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ
        update_progress(workout_id, category, exercise, reps, weight, date)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await message.answer(f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å ID `{workout_id}` —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!\nüìÖ –î–∞—Ç–∞: {date}")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üîé –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é...")
        await show_history(message, )
        print("üîé –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        await show_stats(message, state)
        print("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        await state.clear()

    except ValueError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∏ –≤–µ—Å.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
