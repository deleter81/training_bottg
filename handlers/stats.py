from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from database.db import get_progress, delete_progress
import io
import matplotlib.pyplot as plt

router = Router()


# ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –≤—Å–µ–º –¥–∞–Ω–Ω—ã–º
def generate_graph(user_id):
    workouts = get_progress(user_id)
    if not workouts:
        return None

    exercises = []
    weights = []
    reps = []
    dates = []

    for workout in workouts:
        workout_id, cat, exercise, reps_count, weight, date = workout
        exercises.append(exercise)
        weights.append(weight)
        reps.append(reps_count)
        dates.append(date)

    if not dates:
        return None

    plt.figure(figsize=(10, 6))
    plt.plot(dates, weights, marker='o', label='–í–µ—Å', color='blue')
    plt.plot(dates, reps, marker='s', label='–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', color='red')
    plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º')
    plt.xlabel('–î–∞—Ç–∞')
    plt.ylabel('–í–µ—Å / –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è')
    plt.legend()
    plt.grid(True)

    buffer = io.BytesIO()
    plt.savefig(buffer, format='png')
    buffer.seek(0)
    plt.close()

    return buffer


# ‚úÖ –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
async def show_stats_by_category(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    await state.clear()

    workouts = get_progress(user_id)
    if not workouts:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.")
        return

    response = "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º:*\n\n"
    buttons = []

    for workout in workouts:
        workout_id, cat, exercise, reps, weight, date = workout
        response += f"ID: `{workout_id}`, –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {exercise}, –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {reps}, –í–µ—Å: {weight} –∫–≥, –î–∞—Ç–∞: {date}\n"

        # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        buttons.append([
            types.InlineKeyboardButton(
                text=f"üóë –£–¥–∞–ª–∏—Ç—å ID {workout_id}",
                callback_data=f"delete_{workout_id}"
            )
        ])

    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)

    # ‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(response, parse_mode="Markdown", reply_markup=keyboard)

    # ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    graph = generate_graph(user_id)
    if graph:
        await message.answer_photo(types.BufferedInputFile(graph.getvalue(), filename="stats.png"))
    else:
        await message.answer("üìä –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")


# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
@router.callback_query(lambda c: c.data.startswith('delete_'))
async def delete_record_callback(callback_query: types.CallbackQuery):
    try:
        record_id = int(callback_query.data.split('_')[1])

        # ‚úÖ –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        delete_progress(record_id)

        # ‚úÖ –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        updated_text = callback_query.message.text.replace(
            f"üóë –£–¥–∞–ª–∏—Ç—å ID {record_id}\n", ""
        )

        if updated_text.strip() == "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º:*":
            updated_text = "üìä –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."

        await callback_query.message.edit_text(updated_text, parse_mode="Markdown")

        # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞
        await callback_query.answer("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.")

    except Exception as e:
        await callback_query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")


# ‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats
@router.message(Command("stats"))
@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_stats(message: types.Message, state: FSMContext):
    await state.clear()
    await show_stats_by_category(message, state)